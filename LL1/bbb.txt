const map<string, int> TerminaltoCodeMap = {
	{"integral-literal",0},
	{"OP_LPAREN",1},
	{"OP_RPAREN",2},
	{"defined",3},
	{"identifier_or_keyword",4},
	{"OP_PLUS",5},
	{"OP_MINUS",6},
	{"OP_LNOT",7},
	{"OP_COMPL",8},
	{"OP_STAR",9},
	{"OP_DIV",10},
	{"OP_MOD",11},
	{"OP_LSHIFT",12},
	{"OP_RSHIFT",13},
	{"OP_LT",14},
	{"OP_GT",15},
	{"OP_LE",16},
	{"OP_GE",17},
	{"OP_EQ",18},
	{"OP_NE",19},
	{"OP_AMP",20},
	{"OP_XOR",21},
	{"OP_BOR",22},
	{"OP_LAND",23},
	{"OP_LOR",24},
	{"OP_QMARK",25},
	{"OP_COLON",26},
	{"empty",27},
	{"#",28}
};
const map<string, int> NonterminaltoCodeMap = {
	{"primary-expression",100},
	{"controlling-expression",101},
	{"defined'",102},
	{"unary-expression",103},
	{"multiplicative-expression",104},
	{"unary-expression'",105},
	{"additive-expression",106},
	{"multiplicative-expression'",107},
	{"shift-expression",108},
	{"additive-expression'",109},
	{"relational-expression",110},
	{"shift-expression'",111},
	{"equality-expression",112},
	{"relational-expression'",113},
	{"and-expression",114},
	{"equality-expression'",115},
	{"exclusive-or-expression",116},
	{"and-expression'",117},
	{"inclusive-or-expression",118},
	{"exclusive-or-expression'",119},
	{"logical-and-expression",120},
	{"inclusive-or-expression'",121},
	{"logical-or-expression",122},
	{"logical-and-expression'",123},
	{"logical-or-expression'",124}
};
string Generations[] = {
/* [0] */	"primary-expression -> integral-literal ",
/* [1] */	"primary-expression -> OP_LPAREN controlling-expression OP_RPAREN ",
/* [2] */	"defined' -> identifier_or_keyword ",
/* [3] */	"defined' -> OP_LPAREN identifier_or_keyword OP_RPAREN ",
/* [4] */	"primary-expression -> identifier_or_keyword ",
/* [5] */	"unary-expression -> primary-expression ",
/* [6] */	"unary-expression -> OP_PLUS unary-expression ",
/* [7] */	"unary-expression -> OP_MINUS unary-expression ",
/* [8] */	"unary-expression -> OP_LNOT unary-expression ",
/* [9] */	"unary-expression -> OP_COMPL unary-expression ",
/* [10] */	"multiplicative-expression -> unary-expression unary-expression' ",
/* [11] */	"unary-expression' -> empty ",
/* [12] */	"unary-expression' -> OP_STAR unary-expression unary-expression' ",
/* [13] */	"unary-expression' -> OP_DIV unary-expression unary-expression' ",
/* [14] */	"unary-expression' -> OP_MOD unary-expression unary-expression' ",
/* [15] */	"additive-expression -> multiplicative-expression multiplicative-expression' ",
/* [16] */	"multiplicative-expression' -> empty ",
/* [17] */	"multiplicative-expression' -> OP_PLUS multiplicative-expression multiplicative-expression' ",
/* [18] */	"multiplicative-expression' -> OP_MINUS multiplicative-expression multiplicative-expression' ",
/* [19] */	"shift-expression -> additive-expression additive-expression' ",
/* [20] */	"additive-expression' -> empty ",
/* [21] */	"additive-expression' -> OP_LSHIFT additive-expression additive-expression' ",
/* [22] */	"additive-expression' -> OP_RSHIFT additive-expression additive-expression' ",
/* [23] */	"relational-expression -> shift-expression shift-expression' ",
/* [24] */	"shift-expression' -> empty ",
/* [25] */	"shift-expression' -> OP_LT shift-expression shift-expression' ",
/* [26] */	"shift-expression' -> OP_GT shift-expression shift-expression' ",
/* [27] */	"shift-expression' -> OP_LE shift-expression shift-expression' ",
/* [28] */	"shift-expression' -> OP_GE shift-expression shift-expression' ",
/* [29] */	"equality-expression -> relational-expression relational-expression' ",
/* [30] */	"relational-expression' -> empty ",
/* [31] */	"relational-expression' -> OP_EQ relational-expression relational-expression' ",
/* [32] */	"relational-expression' -> OP_NE relational-expression relational-expression' ",
/* [33] */	"and-expression -> equality-expression equality-expression' ",
/* [34] */	"equality-expression' -> empty ",
/* [35] */	"equality-expression' -> OP_AMP equality-expression equality-expression' ",
/* [36] */	"exclusive-or-expression -> and-expression and-expression' ",
/* [37] */	"and-expression' -> empty ",
/* [38] */	"and-expression' -> OP_XOR and-expression and-expression' ",
/* [39] */	"inclusive-or-expression -> exclusive-or-expression exclusive-or-expression' ",
/* [40] */	"exclusive-or-expression' -> empty ",
/* [41] */	"exclusive-or-expression' -> OP_BOR exclusive-or-expression exclusive-or-expression' ",
/* [42] */	"logical-and-expression -> inclusive-or-expression inclusive-or-expression' ",
/* [43] */	"inclusive-or-expression' -> empty ",
/* [44] */	"inclusive-or-expression' -> OP_LAND inclusive-or-expression inclusive-or-expression' ",
/* [45] */	"logical-or-expression -> logical-and-expression logical-and-expression' ",
/* [46] */	"logical-and-expression' -> empty ",
/* [47] */	"logical-and-expression' -> OP_LOR logical-and-expression logical-and-expression' ",
/* [48] */	"controlling-expression -> logical-or-expression logical-or-expression' ",
/* [49] */	"logical-or-expression' -> empty ",
/* [50] */	"logical-or-expression' -> OP_QMARK controlling-expression OP_COLON controlling-expression ",
/* [51] */	"primary-expression -> defined defined' "
};


const int Table[25][29] = {
	{1,	2,	0,	52,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{49,	49,	0,	49,	49,	49,	49,	49,	49,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	4,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{6,	6,	0,	6,	6,	7,	8,	9,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{11,	11,	0,	11,	11,	11,	11,	11,	11,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	12,	0,	0,	12,	12,	0,	0,	13,	14,	15,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12},
	{16,	16,	0,	16,	16,	16,	16,	16,	16,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	17,	0,	0,	18,	19,	0,	0,	0,	0,	0,	17,	17,	17,	17,	17,	17,	17,	17,	17,	17,	17,	17,	17,	17,	17,	17,	17},
	{20,	20,	0,	20,	20,	20,	20,	20,	20,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	21,	0,	0,	0,	0,	0,	0,	0,	0,	0,	22,	23,	21,	21,	21,	21,	21,	21,	21,	21,	21,	21,	21,	21,	21,	21,	21},
	{24,	24,	0,	24,	24,	24,	24,	24,	24,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	25,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	26,	27,	28,	29,	25,	25,	25,	25,	25,	25,	25,	25,	25,	25,	25},
	{30,	30,	0,	30,	30,	30,	30,	30,	30,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	31,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	32,	33,	31,	31,	31,	31,	31,	31,	31,	31,	31},
	{34,	34,	0,	34,	34,	34,	34,	34,	34,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	35,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	36,	35,	35,	35,	35,	35,	35,	35,	35},
	{37,	37,	0,	37,	37,	37,	37,	37,	37,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	38,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	39,	38,	38,	38,	38,	38,	38,	38},
	{40,	40,	0,	40,	40,	40,	40,	40,	40,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	41,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	42,	41,	41,	41,	41,	41,	41},
	{43,	43,	0,	43,	43,	43,	43,	43,	43,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	44,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	45,	44,	44,	44,	44,	44},
	{46,	46,	0,	46,	46,	46,	46,	46,	46,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
	{0,	0,	47,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	48,	47,	47,	47,	47},
	{0,	0,	50,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	51,	50,	50,	50}
};
